# Generated by Django 4.1.3 on 2022-11-29 16:16

import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Item',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('item_type', models.CharField(choices=[('TZA', '3Т55-ТЗА'), ('TPA', '3С55-ТПА')], max_length=3, verbose_name='Тип изделия')),
                ('item_no', models.IntegerField(verbose_name='Заводской номер изделия')),
                ('item_frame', models.CharField(max_length=17, unique=True, verbose_name='Заводской номер шасси')),
                ('item_engine', models.CharField(max_length=10, unique=True, verbose_name='Заводской номер двигателя')),
                ('item_tn_to', models.CharField(max_length=50, verbose_name='ТН отправки на НПО машиностроения')),
                ('item_tn_from', models.CharField(max_length=50, verbose_name='ТН получения шасси с ОАО "МЗКТ"')),
            ],
            options={
                'verbose_name': 'Изделие',
                'verbose_name_plural': 'Изделия',
                'ordering': ['item_no', 'item_type'],
            },
        ),
        migrations.CreateModel(
            name='Location',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('vch_no', models.IntegerField(verbose_name='Номер войсковой части')),
                ('address', models.TextField(verbose_name='Адрес расположения')),
            ],
            options={
                'verbose_name': 'Расположение',
                'verbose_name_plural': 'Расположение',
                'ordering': ['vch_no'],
            },
        ),
        migrations.CreateModel(
            name='Project',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('project_no', models.CharField(max_length=50, verbose_name='Номер проекта')),
                ('with_npo', models.CharField(max_length=100, unique=True, verbose_name='Номер контракта/договора с НПО машиностроения')),
                ('with_mzkt', models.CharField(max_length=100, unique=True, verbose_name='Контракт с ОАО "МЗКТ"')),
            ],
            options={
                'verbose_name': 'Договор',
                'verbose_name_plural': 'Договора',
                'ordering': ['project_no'],
            },
        ),
        migrations.CreateModel(
            name='Reclamacia',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('mileage', models.IntegerField(verbose_name='Пробег шасси км')),
                ('operating_time_frame', models.IntegerField(verbose_name='Наработка шасси м/ч')),
                ('operating_time_dg1', models.IntegerField(verbose_name='Наработка малого дизель-генератора м/ч')),
                ('operating_time_dg2', models.IntegerField(verbose_name='Наработка большого дизель-генератора м/ч')),
                ('description', models.TextField(verbose_name='Описание обнаруженного дефекта')),
                ('notice_from', models.CharField(max_length=50, verbose_name='Уведомление от НПО машиностроения')),
                ('notice_to', models.CharField(max_length=50, verbose_name='Уведомление на ОАО "МЗКТ"')),
                ('recl_akt_from', models.CharField(max_length=50, verbose_name='Рекламационный акт от НПО машиностроения')),
                ('recl_akt_to', models.CharField(max_length=50, verbose_name=' Рекламационный акт на ОАО "МЗКТ"')),
                ('ai_to', models.CharField(max_length=50, verbose_name='Акт исследования на НПО машиностроения')),
                ('ai_from', models.CharField(max_length=50, verbose_name='Акт исследования от ОАО "МЗКТ"')),
                ('aur_from', models.CharField(max_length=50, verbose_name='Акт удовлетворения рекламации от НПО машиностроения')),
                ('aur_to', models.CharField(max_length=50, verbose_name='Акт удовлетворения рекламации на ОАО "МЗКТ"')),
            ],
            options={
                'verbose_name': 'Рекламационная работа',
                'verbose_name_plural': 'Рекламационные акты',
                'ordering': ['notice_from'],
            },
        ),
        migrations.CreateModel(
            name='ReclUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('is_activated', models.BooleanField(db_index=True, default=True, verbose_name='Пользователь активирован')),
                ('send_messages', models.BooleanField(default=True, verbose_name='Слать оповещения')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
    ]
